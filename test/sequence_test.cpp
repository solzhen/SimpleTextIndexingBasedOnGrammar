#include <catch2/catch_test_macros.hpp>
#include "sequences.hpp"
#include "nsequences.hpp"
#include "debug_config.hpp"
#include "patterns.hpp"
#include "globals.h"

// count the number of occurrences of symbol c in v up to and including position i
int t_rank(int_vector<> v, int c, int i) {
    int count = 0;
    for (int j = 0; j <= i; j++) {
        if (v[j] == c) count++;
    }
    return count;
}
// return the position of the j-th occurrence of symbol c in v
int t_select(int_vector<> v, int c, int j) {
    if (j == 0) return -1;
    int count = 0;
    for (int i = 0; i < v.size(); i++) {
        if (v[i] == c) {
            count++;
            if (count == j) return i;
        }
    }
    return v.size();
}

TEST_CASE("Sequence basic operations", "[sequence]") {
    int_vector<> vec({1, 0, 2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 1, 0, 0, 2, 3, 5, 4, 7, 0, 1, 2, 4, 4, 6, 0, 0, 1, 1, 0});
    ARSSequence seq = ARSSequence(vec, 8);
/*     // print vector
    cout << "S = " << vec << endl;    
    // print member A
    for (u_int i = 0; i < seq.A.size(); i++) {
        cout << "A[" << i << "].b: " << seq.A[i].b << endl;
    }
    // print member D
    for (u_int i = 0; i < seq.D.size(); i++) {
        cout << "D[" << i << "].b: " << seq.D[i].b << endl;
    }
    // print member pi
    for (u_int i = 0; i < seq.pi.size(); i++) {
        cout << "pi[" << i << "]: " << seq.pi[i].pi << endl;
    } */
    cout << "Accessing sequence..." << endl;
    for (u_int i = 0; i < vec.size(); i++) {
        REQUIRE(seq.access(i) == vec[i]);
    }
    cout << "Rank queries..." << endl;
    // rank(c,i) for position i the symbol c: the number of c's in the sequence up to and including position i
    for (u_int i = 0; i < vec.size(); i++) {
        for (u_int c = 0; c < 8; c++) {
            REQUIRE(seq.rank(c, i) == t_rank(vec, c, i));
        }
    }
    cout << "Select queries..." << endl;
    // select(c,j) for the j-th occurrence of symbol c in the sequence return its position
    for (u_int j = 1; j < vec.size(); j++) {
        for (u_int c = 0; c < 8; c++) {
            REQUIRE(seq.select(c, j) == t_select(vec, c, j));
        }
    }
    
}

TEST_CASE("New Sequence basic operations", "[sequence]") {
    int_vector<> vec({1, 0, 2, 1, 2, 2, 2, 0, 1, 0, 0, 3, 2, 1, 0, 0, 2, 3, 5, 4, 7, 0, 1, 2, 4, 4, 6, 0, 0, 1, 1, 0});
    RSequence seq = RSequence(vec, 8);
/*     // print vector
    cout << "S = " << vec << endl;    
    // print member A_
    cout << "A_.b: " << seq.A_.b << endl;
    // print member B_
    cout << "B_.b: " << seq.B_.b << endl;
    // print member D
    for (u_int i = 0; i < seq.D.size(); i++) {
        cout << "D[" << i << "].b: " << seq.D[i].b << endl;
    }
    // print member pi
    for (u_int i = 0; i < seq.pi.size(); i++) {
        cout << "pi[" << i << "]: " << seq.pi[i].pi << endl;
    } */
    cout << "Accessing sequence..." << endl;
    for (u_int i = 0; i < vec.size(); i++) {
        REQUIRE(seq.access(i) == vec[i]);
    }
    cout << "Rank queries..." << endl;
    for (u_int i = 0; i < vec.size(); i++) {
        for (u_int c = 0; c < 8; c++) {
            REQUIRE(seq.rank(c, i) == t_rank(vec, c, i));
        }
    }
    cout << "Select queries..." << endl;
    for (u_int j = 1; j < vec.size(); j++) {
        for (u_int c = 0; c < 8; c++) {
            REQUIRE(seq.select(c, j) == t_select(vec, c, j));
        }
    }
}

TEST_CASE("New Sequence basic operations on random sequence", "[sequence]") {
    u_int sigma = 50;
    u_int n = 2000;
    int_vector<> vec = int_vector<>(n, 0);    
    for (u_int i = 0; i < n; i++) {
        vec[i] = rand() % sigma;
    }
    // ensure all symbols are present in the sequence
    for (u_int c = 0; c < sigma; c++) {
        vec[c] = c;
    }
    cout << "Accessing sequence..." << endl;
    RSequence seq = RSequence(vec, sigma);
    for (u_int i = 0; i < vec.size(); i++) {
        REQUIRE(seq.access(i) == vec[i]);
    }
    cout << "Rank queries... 0%" << flush;
    for (u_int i = 0; i < vec.size(); i++) {
        if (i % (n/100) == 0) {
            cout << "\rRank queries... " << i*100/n << "%" << flush;
        }
        for (u_int c = 0; c < sigma; c++) {
            REQUIRE(seq.rank(c, i) == t_rank(vec, c, i));
        }
    }
    cout << "\rRank queries... 100%" << endl;

    // catch SISSEGV

    //cout << "Select query" << flush;
    cout << "Select queries... 0%" << flush;
    for (u_int j = 1; j < vec.size(); j++) {
        if (j % (n/100) == 0) {
            cout << "\rSelect queries... " << j*100/n << "%" << flush;
        }
        for (u_int c = 0; c < sigma; c++) {
            //cout << "\rSelect(" << c << ", " << j << ")" << flush;
            REQUIRE(seq.select(c, j) == t_select(vec, c, j));
        }
    }
    cout << "\rSelect queries... 100%" << endl;
}


TEST_CASE("New Sequence basic operations on sequence generated by pattern searcher", "[sequence_pattern]") {
    REQUIRE_FALSE(g_fileName.empty());
    string input_filename = g_fileName;
    u_int text_length;
    u_int num_rules;
    PatternSearcher PS = PatternSearcher(input_filename, &text_length, &num_rules);

    RSequence seq = PS.R;
    int sigma = seq.sigma;

    cout << "Accessing sequence..." << endl;

    for (u_int i = 0; i < seq.size(); i++) {
        seq.access(i);
    }

    //cout << "Rank queries... 0%" << flush;
/*     for (u_int i = 0; i < seq.size(); i++) {
        if (i % (seq.size()/100) == 0) {
            //cout << "\rRank queries... " << i*100/seq.size() << "%" << flush;
        }
        for (u_int c = 0; c < sigma; c++) {
            seq.rank(c, i);
        }
    } */
    //cout << "\rRank queries... 100%" << endl;

    // catch SISSEGV

    cout << seq.A_.b << endl;
    cout << seq.B_.b << endl;

    seq.reload();



    //cout << "Select query" << flush;
    //cout << "Select queries... 0%" << flush;
    for (u_int j = 1; j < seq.size(); j++) {
        if (j % (seq.size()/100) == 0) {
            //cout << "\rSelect queries... " << j*100/seq.size() << "%" << flush;
        }
        for (u_int c = 0; c < sigma; c++) {
            //cout << "\rSelect(" << c << ", " << j << ")" << flush;
            seq.select(c, j);
        }
    }
    //cout << "\rSelect queries... 100%" << endl;
}


/*
    REQUIRE(seq.rank(0, 0) == 0);
    REQUIRE(seq.rank(0, 1) == 1);
    REQUIRE(seq.rank(0, 4) == 1);
    REQUIRE(seq.rank(0, 7) == 2);
    REQUIRE(seq.rank(0, 9) == 3);
    REQUIRE(seq.rank(0, 10) == 4);
    REQUIRE(seq.rank(0, 11) == 4);
    REQUIRE(seq.rank(0, 13) == 4);
    REQUIRE(seq.rank(0, 14) == 5);
    REQUIRE(seq.rank(0, 15) == 6);
    REQUIRE(seq.rank(0, 16) == 6);
    REQUIRE(seq.rank(0, 20) == 6);
    REQUIRE(seq.rank(0, 21) == 7);
    REQUIRE(seq.rank(0, 27) == 8);
    REQUIRE(seq.rank(0, 28) == 9);
    REQUIRE(seq.rank(0, 31) == 10);
    REQUIRE(seq.rank(1, 0) == 1);
    REQUIRE(seq.rank(1, 1) == 1);
    REQUIRE(seq.rank(1, 3) == 2);
    REQUIRE(seq.rank(1, 8) == 3);
    REQUIRE(seq.rank(1, 13) == 4);
    REQUIRE(seq.rank(1, 22) == 5);
    REQUIRE(seq.rank(1, 29) == 6);
    REQUIRE(seq.rank(1, 30) == 7);
    REQUIRE(seq.rank(1, 31) == 7);
    REQUIRE(seq.rank(2, 0) == 0);
    REQUIRE(seq.rank(2, 2) == 1);
    REQUIRE(seq.rank(2, 4) == 2);
    REQUIRE(seq.rank(2, 5) == 3);
    REQUIRE(seq.rank(2, 6) == 4);
    REQUIRE(seq.rank(2, 7) == 4);
    REQUIRE(seq.rank(2, 12) == 5);*/